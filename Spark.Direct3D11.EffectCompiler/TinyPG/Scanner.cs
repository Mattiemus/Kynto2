// Generated by TinyPG v1.3 available at www.codeproject.com

namespace Spark.Direct3D11.Graphics
{
    using System.Collections.Generic;
    using System.Text.RegularExpressions;
    using System.Xml.Serialization;

    #region Scanner

    internal partial class Scanner
    {
        public string Input;
        public int StartPos = 0;
        public int EndPos = 0;
        public int CurrentLine;
        public int CurrentColumn;
        public int CurrentPosition;
        public List<Token> Skipped; // tokens that were skipped
        public Dictionary<TokenType, Regex> Patterns;

        private Token LookAheadToken;
        private List<TokenType> Tokens;
        private List<TokenType> SkipList; // tokens to be skipped

        public Scanner()
        {
            Regex regex;
            Patterns = new Dictionary<TokenType, Regex>();
            Tokens = new List<TokenType>();
            LookAheadToken = null;
            Skipped = new List<Token>();

            SkipList = new List<TokenType>();
            SkipList.Add(TokenType.BlockComment);
            SkipList.Add(TokenType.Comment);
            SkipList.Add(TokenType.Whitespace);

            regex = new Regex(@"/\*([^*]|\*[^/])*\*/", RegexOptions.Compiled);
            Patterns.Add(TokenType.BlockComment, regex);
            Tokens.Add(TokenType.BlockComment);

            regex = new Regex(@"//[^\n\r]*", RegexOptions.Compiled);
            Patterns.Add(TokenType.Comment, regex);
            Tokens.Add(TokenType.Comment);

            regex = new Regex(@"[ \t\n\r]+", RegexOptions.Compiled);
            Patterns.Add(TokenType.Whitespace, regex);
            Tokens.Add(TokenType.Whitespace);

            regex = new Regex(@"[A-Za-z_][A-Za-z0-9_]*", RegexOptions.Compiled);
            Patterns.Add(TokenType.Identifier, regex);
            Tokens.Add(TokenType.Identifier);

            regex = new Regex(@"pass|Pass", RegexOptions.Compiled);
            Patterns.Add(TokenType.Pass, regex);
            Tokens.Add(TokenType.Pass);

            regex = new Regex(@"technique(10|11)?|Technique(10|11)?", RegexOptions.Compiled);
            Patterns.Add(TokenType.Technique, regex);
            Tokens.Add(TokenType.Technique);

            regex = new Regex(@"SetVertexShader", RegexOptions.Compiled);
            Patterns.Add(TokenType.SetVertexShader, regex);
            Tokens.Add(TokenType.SetVertexShader);

            regex = new Regex(@"SetPixelShader", RegexOptions.Compiled);
            Patterns.Add(TokenType.SetPixelShader, regex);
            Tokens.Add(TokenType.SetPixelShader);

            regex = new Regex(@"SetGeometryShader", RegexOptions.Compiled);
            Patterns.Add(TokenType.SetGeometryShader, regex);
            Tokens.Add(TokenType.SetGeometryShader);

            regex = new Regex(@"SetDomainShader", RegexOptions.Compiled);
            Patterns.Add(TokenType.SetDomainShader, regex);
            Tokens.Add(TokenType.SetDomainShader);

            regex = new Regex(@"SetHullShader", RegexOptions.Compiled);
            Patterns.Add(TokenType.SetHullShader, regex);
            Tokens.Add(TokenType.SetHullShader);

            regex = new Regex(@"SetComputeShader", RegexOptions.Compiled);
            Patterns.Add(TokenType.SetComputeShader, regex);
            Tokens.Add(TokenType.SetComputeShader);

            regex = new Regex(@"CompileShader", RegexOptions.Compiled);
            Patterns.Add(TokenType.CompileShader, regex);
            Tokens.Add(TokenType.CompileShader);

            regex = new Regex(@"(vs_)(4_0|4_1|5_0)", RegexOptions.Compiled);
            Patterns.Add(TokenType.VSShaderProfile, regex);
            Tokens.Add(TokenType.VSShaderProfile);

            regex = new Regex(@"(ps_)(4_0|4_1|5_0)", RegexOptions.Compiled);
            Patterns.Add(TokenType.PSShaderProfile, regex);
            Tokens.Add(TokenType.PSShaderProfile);

            regex = new Regex(@"(gs_)(4_0|4_1|5_0)", RegexOptions.Compiled);
            Patterns.Add(TokenType.GSShaderProfile, regex);
            Tokens.Add(TokenType.GSShaderProfile);

            regex = new Regex(@"(ds_)(5_0)", RegexOptions.Compiled);
            Patterns.Add(TokenType.DSShaderProfile, regex);
            Tokens.Add(TokenType.DSShaderProfile);

            regex = new Regex(@"(hs_)(5_0)", RegexOptions.Compiled);
            Patterns.Add(TokenType.HSShaderProfile, regex);
            Tokens.Add(TokenType.HSShaderProfile);

            regex = new Regex(@"(cs_)(5_0)", RegexOptions.Compiled);
            Patterns.Add(TokenType.CSShaderProfile, regex);
            Tokens.Add(TokenType.CSShaderProfile);

            regex = new Regex(@"[\S]", RegexOptions.Compiled);
            Patterns.Add(TokenType.Code, regex);
            Tokens.Add(TokenType.Code);

            regex = new Regex(@"^$", RegexOptions.Compiled);
            Patterns.Add(TokenType.EndOfFile, regex);
            Tokens.Add(TokenType.EndOfFile);

            regex = new Regex(@"{", RegexOptions.Compiled);
            Patterns.Add(TokenType.OpenBracket, regex);
            Tokens.Add(TokenType.OpenBracket);

            regex = new Regex(@"}", RegexOptions.Compiled);
            Patterns.Add(TokenType.CloseBracket, regex);
            Tokens.Add(TokenType.CloseBracket);

            regex = new Regex(@"=", RegexOptions.Compiled);
            Patterns.Add(TokenType.Equals, regex);
            Tokens.Add(TokenType.Equals);

            regex = new Regex(@";", RegexOptions.Compiled);
            Patterns.Add(TokenType.Semicolon, regex);
            Tokens.Add(TokenType.Semicolon);

            regex = new Regex(@"\(", RegexOptions.Compiled);
            Patterns.Add(TokenType.OpenParentheses, regex);
            Tokens.Add(TokenType.OpenParentheses);

            regex = new Regex(@"\)", RegexOptions.Compiled);
            Patterns.Add(TokenType.CloseParentheses, regex);
            Tokens.Add(TokenType.CloseParentheses);

            regex = new Regex(@",", RegexOptions.Compiled);
            Patterns.Add(TokenType.Comma, regex);
            Tokens.Add(TokenType.Comma);

            regex = new Regex(@"NULL|0", RegexOptions.Compiled);
            Patterns.Add(TokenType.NULL, regex);
            Tokens.Add(TokenType.NULL);


        }

        public void Init(string input)
        {
            this.Input = input;
            StartPos = 0;
            EndPos = 0;
            CurrentLine = 0;
            CurrentColumn = 0;
            CurrentPosition = 0;
            LookAheadToken = null;
        }

        public Token GetToken(TokenType type)
        {
            Token t = new Token(this.StartPos, this.EndPos);
            t.Type = type;
            return t;
        }

        /// <summary>
        /// executes a lookahead of the next token
        /// and will advance the scan on the input string
        /// </summary>
        /// <returns></returns>
        public Token Scan(params TokenType[] expectedtokens)
        {
            Token tok = LookAhead(expectedtokens); // temporarely retrieve the lookahead
            LookAheadToken = null; // reset lookahead token, so scanning will continue
            StartPos = tok.EndPos;
            EndPos = tok.EndPos; // set the tokenizer to the new scan position
            return tok;
        }

        /// <summary>
        /// returns token with longest best match
        /// </summary>
        /// <returns></returns>
        public Token LookAhead(params TokenType[] expectedtokens)
        {
            int i;
            int startpos = StartPos;
            Token tok = null;
            List<TokenType> scantokens;


            // this prevents double scanning and matching
            // increased performance
            if (LookAheadToken != null
                && LookAheadToken.Type != TokenType._UNDETERMINED_
                && LookAheadToken.Type != TokenType._NONE_) return LookAheadToken;

            // if no scantokens specified, then scan for all of them (= backward compatible)
            if (expectedtokens.Length == 0)
                scantokens = Tokens;
            else
            {
                scantokens = new List<TokenType>(expectedtokens);
                scantokens.AddRange(SkipList);
            }

            do
            {

                int len = -1;
                TokenType index = (TokenType)int.MaxValue;
                string input = Input.Substring(startpos);

                tok = new Token(startpos, EndPos);

                for (i = 0; i < scantokens.Count; i++)
                {
                    Regex r = Patterns[scantokens[i]];
                    Match m = r.Match(input);
                    if (m.Success && m.Index == 0 && ((m.Length > len) || (scantokens[i] < index && m.Length == len)))
                    {
                        len = m.Length;
                        index = scantokens[i];
                    }
                }

                if (index >= 0 && len >= 0)
                {
                    tok.EndPos = startpos + len;
                    tok.Text = Input.Substring(tok.StartPos, len);
                    tok.Type = index;
                }
                else if (tok.StartPos < tok.EndPos - 1)
                {
                    tok.Text = Input.Substring(tok.StartPos, 1);
                }

                if (SkipList.Contains(tok.Type))
                {
                    startpos = tok.EndPos;
                    Skipped.Add(tok);
                }
                else
                {
                    // only assign to non-skipped tokens
                    tok.Skipped = Skipped; // assign prior skips to this token
                    Skipped = new List<Token>(); //reset skips
                }
            }
            while (SkipList.Contains(tok.Type));

            LookAheadToken = tok;
            return tok;
        }
    }

    #endregion

    #region Token

    internal enum TokenType
    {

        //Non terminal tokens:
        _NONE_ = 0,
        _UNDETERMINED_ = 1,

        //Non terminal tokens:
        Start = 2,
        Technique_Declaration = 3,
        Pass_Declaration = 4,
        SetVertexShader_Expression = 5,
        SetPixelShader_Expression = 6,
        SetGeometryShader_Expression = 7,
        SetDomainShader_Expression = 8,
        SetHullShader_Expression = 9,
        SetComputeShader_Expression = 10,

        //Terminal tokens:
        BlockComment = 11,
        Comment = 12,
        Whitespace = 13,
        Identifier = 14,
        Pass = 15,
        Technique = 16,
        SetVertexShader = 17,
        SetPixelShader = 18,
        SetGeometryShader = 19,
        SetDomainShader = 20,
        SetHullShader = 21,
        SetComputeShader = 22,
        CompileShader = 23,
        VSShaderProfile = 24,
        PSShaderProfile = 25,
        GSShaderProfile = 26,
        DSShaderProfile = 27,
        HSShaderProfile = 28,
        CSShaderProfile = 29,
        Code = 30,
        EndOfFile = 31,
        OpenBracket = 32,
        CloseBracket = 33,
        Equals = 34,
        Semicolon = 35,
        OpenParentheses = 36,
        CloseParentheses = 37,
        Comma = 38,
        NULL = 39
    }

    internal class Token
    {
        private int startpos;
        private int endpos;
        private string text;
        private object value;

        // contains all prior skipped symbols
        private List<Token> skipped;

        public int StartPos
        {
            get { return startpos; }
            set { startpos = value; }
        }

        public int Length
        {
            get { return endpos - startpos; }
        }

        public int EndPos
        {
            get { return endpos; }
            set { endpos = value; }
        }

        public string Text
        {
            get { return text; }
            set { text = value; }
        }

        public List<Token> Skipped
        {
            get { return skipped; }
            set { skipped = value; }
        }
        public object Value
        {
            get { return value; }
            set { this.value = value; }
        }

        [XmlAttribute]
        public TokenType Type;

        public Token()
            : this(0, 0)
        {
        }

        public Token(int start, int end)
        {
            Type = TokenType._UNDETERMINED_;
            startpos = start;
            endpos = end;
            Text = ""; // must initialize with empty string, may cause null reference exceptions otherwise
            Value = null;
        }

        public void UpdateRange(Token token)
        {
            if (token.StartPos < startpos) startpos = token.StartPos;
            if (token.EndPos > endpos) endpos = token.EndPos;
        }

        public override string ToString()
        {
            if (Text != null)
                return Type.ToString() + " '" + Text + "'";
            else
                return Type.ToString();
        }
    }

    #endregion
}
